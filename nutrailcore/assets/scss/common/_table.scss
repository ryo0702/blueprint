//
// Basic Bootstrap table
//

tbody, td, tfoot, th, thead, tr {
	border-color : inherit;
	border-style : solid;
	border-width : 0;
}

th {
	text-align : inherit;
	text-align : -webkit-match-parent;
}

table {
	--table-color             : var(--table-text);
	--table-bg                : var(--table-bgc);
	--table-border-color      : var(--talbe-line);
	--table-accent-bg         : var(--table-bgc-accent);
	--table-striped-color     : var(--table-color-active);
	--table-striped-bg        : var(--table-bgc-striped);
	--table-active-color      : var(--table-color-active);
	--table-active-bg         : var(--table-bgc-active);
	--table-hover-color       : var(--table-color-hover);
	--table-hover-bg          : var(--table-bgc-hover);
	--table-vertical-align    : top;
	--table-margin-bottom     : 0;
	--table-cell-padding-x    : 20px;
	--table-cell-padding-y    : 20px;
	--table-cell-padding-x-sm : 10px;
	--table-cell-padding-y-sm : 10px;
	--table-border-width      : 1px;
	width                     : 100%;
	caption-side              : bottom;
	border-collapse           : collapse;
	margin-bottom             : var(--table-margin-bottom);
	color                     : var(--table-color);
	vertical-align            : var(--table-vertical-align);
	border-color              : var(--table-border-color);

	// Target th & td
	// We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.
	// We use the universal selectors here to simplify the selector (else we would need 6 different selectors).
	// Another advantage is that this generates less code and makes the selector less specific making it easier to override.
	// stylelint-disable-next-line selector-max-universal
	> :not(caption) > * > * {
		padding             : var(--table-cell-padding-y) var(--table-cell-padding-x);
		background-color    : var(--table-bg);
		border-bottom-width : var(--table-border-width);
		box-shadow          : inset 0 0 0 9999px var(--table-accent-bg);
	}

	> tbody {
		vertical-align : inherit;
	}

	> thead {
		vertical-align : bottom;
	}

	/*&:not([class*="table-striped"]) > :not(caption) > tr > :nth-child(odd) {
	  --table-accent-bg : var(--table-striped-bg);
	  color             : var(--table-striped-color);
	}*/

	&:not(.table-borderless) > :not(caption) > * {
		border-width : var(--table-border-width) 0;

		// stylelint-disable-next-line selector-max-universal
		> * {
			border-width : 0 var(--table-border-width);
		}
	}

	&.table-list {
		display : block;
		width   : 100%;

		tbody, tr {
			display : block;
			width   : 100%;
		}

		td, th {
			display : block;
		}

		@include mq(md) {
			display : table;
			width   : 100%;

			tbody, tr {
				display : revert;
			}

			td, th {
				display : table-cell;
			}
		}
	}

}

//
// Change placement of captions with a class
//

.caption-top {
	caption-side : top;
}


//
// Condensed table w/ half padding
//

.table-sm {
	// stylelint-disable-next-line selector-max-universal
	> :not(caption) > * > * {
		padding : var(--table-cell-padding-y-sm) var(--table-cell-padding-x-sm);
	}
}


// Border versions
//
// Add or remove borders all around the table and between all the columns.
//
// When borders are added on all sides of the cells, the corners can render odd when
// these borders do not have the same color or if they are semi-transparent.
// Therefor we add top and border bottoms to the `tr`s and left and right borders
// to the `td`s or `th`s

.table-bordered {
	> :not(caption) > * {
		border-width : var(--table-border-width) 0;

		// stylelint-disable-next-line selector-max-universal
		> * {
			border-width : 0 var(--table-border-width);
		}
	}
}

.table-borderless {
	// stylelint-disable-next-line selector-max-universal
	> :not(caption) > * > * {
		border-bottom-width : 0;
	}

	> :not(:first-child) {
		border-top-width : 0;
	}
}

// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

// For rows
.table-striped {
	> tbody > tr:nth-of-type(odd) > * {
		--table-accent-bg : var(--table-striped-bg);
		color             : var(--table-striped-color);
	}
}

.table-striped-even {
	> tbody > tr:nth-of-type(even) > * {
		--table-accent-bg : var(--table-striped-bg);
		color             : var(--table-striped-color);
	}
}

// For columns
.table-striped-columns {
	> :not(caption) > tr > :nth-child(odd) {
		--table-accent-bg : var(--table-striped-bg);
		color             : var(--table-striped-color);
	}
}

.table-striped-columns-even {
	> :not(caption) > tr > :nth-child(even) {
		--table-accent-bg : var(--table-striped-bg);
		color             : var(--table-striped-color);
	}
}

// Active table
//
// The `.table-active` class can be added to highlight rows or cells

.table-active {
	--table-accent-bg : var(--table-active-bg);
	color             : var(--table-active-color);
}

// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
	> tbody > tr:hover > * {
		--table-accent-bg : var(--table-hover-bg);
		color             : var(--table-hover-color);
	}
}

// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.

.table-responsive {
	overflow-x                 : auto;
	-webkit-overflow-scrolling : touch;
}
